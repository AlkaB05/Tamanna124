import java.util.*;
import java.util.stream.Collectors;

class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return name + " | Age: " + age + " | Salary: " + salary;
    }
}

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    @Override
    public String toString() {
        return name + " | Marks: " + marks;
    }
}

class Product {
    String name;
    String category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    @Override
    public String toString() {
        return name + " | Category: " + category + " | Price: " + price;
    }
}

public class LambdaStreamExample {
    public static void main(String[] args) {
        // a. Sort Employees
        List<Employee> employees = Arrays.asList(
            new Employee("Alice", 30, 50000),
            new Employee("Bob", 25, 60000),
            new Employee("Charlie", 28, 55000)
        );

        System.out.println("Sorted Employees by Salary:");
        employees.stream()
                 .sorted((e1, e2) -> Double.compare(e1.salary, e2.salary))
                 .forEach(System.out::println);

        System.out.println("\n");

        // b. Filter and sort Students
        List<Student> students = Arrays.asList(
            new Student("John", 80),
            new Student("Emma", 70),
            new Student("David", 90)
        );

        System.out.println("Students scoring above 75% sorted by marks:");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);

        System.out.println("\n");

        // c. Process Products dataset
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 80000),
            new Product("Phone", "Electronics", 50000),
            new Product("Shirt", "Clothing", 2000),
            new Product("Jeans", "Clothing", 3000),
            new Product("Fridge", "Appliances", 40000)
        );

        // Group by category
        Map<String, List<Product>> grouped = products.stream()
                                                     .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Products grouped by category:");
        grouped.forEach((k, v) -> System.out.println(k + ": " + v));

        // Most expensive product in each category
        Map<String, Optional<Product>> mostExpensive = products.stream()
                .collect(Collectors.groupingBy(p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))));
        System.out.println("\nMost expensive product in each category:");
        mostExpensive.forEach((k, v) -> System.out.println(k + ": " + v.get()));

        // Average price of all products
        double avgPrice = products.stream()
                                  .mapToDouble(p -> p.price)
                                  .average()
                                  .orElse(0.0);
        System.out.println("\nAverage price of all products: " + avgPrice);
    }
}
